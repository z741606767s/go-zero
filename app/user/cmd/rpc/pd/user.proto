syntax = "proto3";

option go_package = "./pd";

package pd;

//model
message User {
  int64 id = 1;
  string mobile = 2;
  string email = 3;
  string nickname = 4;
  int32 sex = 5;
  string avatar = 6;
  string info = 7;
}

message UserAuth {
  int64 id = 1;
  int64 userId = 2;
  string authType = 3;
  string authKey = 4;
}

//req、resp
message RegisterReq {
  string mobile = 1;
  string nickname = 2;
  string password = 3;
  string authKey = 4;
  string authType = 5;
}
message RegisterResp {
  string accessToken = 1;
  int64  accessExpire = 2;
  int64  refreshAfter = 3;
}

message LoginReq {
  string  authType = 1;
  string authKey = 2;
  string  password = 3;
}
message LoginResp {
  string accessToken = 1;
  int64  accessExpire = 2;
  int64  refreshAfter = 3;
}

message GetUserInfoReq {
  int64  id = 1;
}
message GetUserInfoResp {
  User user = 1;
}

message GetUserAuthByAuthKeyReq {
  string  authKey = 1;
  string  authType = 2;
}
message GetUserAuthByAuthKeyResp {
  UserAuth userAuth = 1;
}

message GetUserAuthByUserIdReq {
  int64  userId = 1;
  string  authType = 2;
}
message GetUserAuthyUserIdResp {
  UserAuth userAuth = 1;
}

message GenerateTokenReq {
  int64 userId = 1;
}
message GenerateTokenResp {
  string accessToken = 1;
  int64  accessExpire = 2;
  int64  refreshAfter = 3;
}

service user {
  rpc login(LoginReq) returns(LoginResp);//登陆
  rpc register(RegisterReq) returns(RegisterResp);//注册
  rpc getUserInfo(GetUserInfoReq) returns(GetUserInfoResp);//获取用户信息
  rpc getUserAuthByAuthKey(GetUserAuthByAuthKeyReq) returns(GetUserAuthByAuthKeyResp);//通过验证密钥获取用户验证
  rpc getUserAuthByUserId(GetUserAuthByUserIdReq) returns(GetUserAuthyUserIdResp);//通过用户 ID 获取用户验证
  rpc generateToken(GenerateTokenReq) returns(GenerateTokenResp);//生成令牌
}